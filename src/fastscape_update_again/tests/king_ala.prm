# King2010 ALA benchmark

# reference values (old):
# Code Ra   Di   Nu     Vrms    Vsurf−max <V surf> <T>    <φ>    <W >
# CU   10^4 0.25 4.4100 40.0000 58.1000   38.8000  0.5148 0.8494 0.8501
# wealt   "    "    4.44   39.9                       0.51493 8.46633256e-01 8.46071386e-01
# we   "    "    4.43957   39.887840                       0.514951021 8.46633256e-01 8.46071386e-01
# okay

# CU   10^5 0.25 9.2100 178.2000 252.4000 184.3000 0.5319 2.0503 2.0540
# WE   "    "    9.50829 178.07837                  0.532474458   2.05198146e+00  -2.05114850e+00
# okay


# ALA  10^4  1   2.4700 24.9000 37.6000 24.4000 0.5103 1.3627 1.3638
# Leng08     1   2.47                   24.3           1.3542 ,1.3587
# WE schrott     2.411  24.3                    0.510  1.30194982e+00 -1.31280279e+00
# We new         2.455  24.7                    0.5115 1.34274053e+00 -1.35403894e+00
# no-1/3    2.456  24.7      0.5117 1.34669982e+00  -1.35134127e+00
# with, exact grad           1.34253646e+00 -1.35382342e+00


# ALA  10^4 0.5 3.8200 35.9000 52.8000 35.1000 0.5217 1.3818 1.3830
# we with1/3    3.849  35.9                    0.5225 1.38400306e+00 -1.38222762e+00
# we no-1/3     3.83   35.9                    0.5225 1.38569274e+00 -1.38212532e+00


# ALA  10^5 1.0  3.8800 84.6000 137.2000 88.8000 0.5294 2.7652 2.7742
# we             3.886  84.4                     0.53   2.76013974e+00 -2.76857768e+00



# TALA:
# Code Ra   Di   Nu     Vrms    Vsurf−max <V surf> <T>    <φ>    <W >
# TALA 10^4 0.25 4.4200 40.1000 58.7000 39.3000 0.5129 0.8539 0.8521
# TALA 10^5 0.25 9.2300 178.6000 254.6000 186.0000 0.5303 2.0597 2.0573
# TALA 10^4  0.5 3.8600 36.3000 54.3000 36.1000 0.5191 1.4103 1.3948

# TALA 10^4 1    2.5700 26.0000 40.6000 26.4000 0.5092 1.4651 1.4019
# ALA  10^4  1   2.4700 24.9000 37.6000 24.4000 0.5103 1.3627 1.3638




# At the top, we define the number of space dimensions we would like to
# work in:
set Dimension                              = 2
set CFL number = 10.0
set Additional shared libraries                = ./libplugin.so



set Adiabatic surface temperature              = 0.091 #0.100
#set Use conduction timestep = true


# There are several global variables that have to do with what
# time system we want to work in and what the end time is. We
# also designate an output directory.
set Use years in output instead of seconds = false
set End time                               = 0.15
set Output directory                       = output

subsection Discretization
  subsection Stabilization parameters
    set alpha                                              = 2
    set beta                                               = 0.005
    set cR                                                 = 0.033
  end
end

# Then there are variables that describe the tolerance of
# the linear solver as well as how the pressure should
# be normalized. Here, we choose a zero average pressure
# at the surface of the domain (for the current geometry, the
# surface is defined as the top boundary).

set Pressure normalization                 = surface
set Surface pressure                       = 0



subsection Adiabatic conditions model
  set Model name = function

  subsection Function
    set Function constants  = Di=0.25, gamma=1.0
    set Function expression = 0.091*exp(depth*Di); gamma/Di*(exp(depth*Di/gamma)-1); exp(depth*Di/gamma)  # T,p,rho
    set Variable names      = depth
  end

end


# Then come a number of sections that deal with the setup
# of the problem to solve. The first one deals with the
# geometry of the domain within which we want to solve.
# The sections that follow all have the same basic setup
# where we select the name of a particular model (here,
# the box geometry) and then, in a further subsection,
# set the parameters that are specific to this particular
# model.
subsection Geometry model
  set Model name = box

  subsection Box
    set X extent = 1
    set Y extent = 1
  end
end


# The next section deals with the initial conditions for the
# temperature (there are no initial conditions for the
# velocity variable since the velocity is assumed to always
# be in a static equilibrium with the temperature field).
# There are a number of models with the 'function' model
# a generic one that allows us to enter the actual initial
# conditions in the form of a formula that can contain
# constants. We choose a linear temperature profile that
# matches the boundary conditions defined below plus
# a small perturbation:
subsection Initial temperature model
  set Model name = function

  subsection Function
    set Variable names      = x,z
    set Function constants  = p=0.01, L=1, pi=3.1415926536, k=1
    set Function expression =  1* ((1.0-z/L) + p*cos(k*pi*x/L/1.0)*sin(pi*z/L)) +0.091
  end
end

subsection Initial temperature model
  set Model name = function
  subsection Function
#    set Function constants  = z1=0.102367, z2=0.897633, pi=3.14159265359
#    set Function expression = if(z<z1,0.5+0.5*(z1-z)/z1,if(z>z2,0.5*(1-z)/(1-z2),0.5)) + 0.1 * cos(x*pi) * sin(z*pi)
#    set Variable names      = x,z
  end
end


# Then follows a section that describes the boundary conditions
# for the temperature. The model we choose is called 'box' and
# allows to set a constant temperature on each of the four sides
# of the box geometry. In our case, we choose something that is
# heated from below and cooled from above. (As will be seen
# in the next section, the actual temperature prescribed here
# at the left and right does not matter.)
subsection Boundary temperature model
  set List of model names = box


  subsection Box
    set Top temperature    = 0.091
    set Bottom temperature = 1.091
    set Left temperature   = 0
    set Right temperature  = 0
  end
end

# We then also have to prescribe several other parts of the model such as
# which boundaries actually carry a prescribed boundary temperature, whereas
# all other parts of the boundary are insulated (i.e., no heat flux through
# these boundaries; this is also often used to specify symmetry boundaries).
# The parameters below this comment were created by the update script
# as replacement for the old 'Model settings' subsection. They can be
# safely merged with any existing subsections with the same name.

subsection Boundary temperature model
  set Fixed temperature boundary indicators   = top, bottom
end

subsection Boundary velocity model
  set Tangential velocity boundary indicators = left, right, top, bottom
end

subsection Heating model
  # shear heating: 1/2 eta*e(u): ... need  -> 1/2 e(u): ..  * Di/Ra
  # adiabatic heating: alpha T (u . \nabla p)
  #

  set List of model names = adiabatic heating, shear heating#, constant heating

  subsection Constant heating
    set Radiogenic heating rate = 1.25e-12#5e-9
  end

  subsection Adiabatic heating
    # A flag indicating whether the adiabatic heating should be simplified
    # from $\alpha T (\mathbf u \cdot \nabla p)$
    # to $ \alpha \rho T (\mathbf u \cdot \mathbf g) $. alpha=thermal exp

    # have \alpha rho T w
    # need: \alpha \rho T w Di
    set Use simplified adiabatic heating = true
  end
end

subsection Formulation
  set Formulation = anelastic liquid approximation
  #set Mass conservation        = reference density profile
  #set Temperature equation     = reference density profile
end

subsection Gravity model
  set Model name = vertical

  subsection Vertical
    set Magnitude = 1
  end
end


subsection Material model
  #set Model name = simple compressible
  set Model name = king material
  subsection King model
    set Reference density             = 1

    # The value of the specific heat $cp$. Units: \\si{\\joule\\per\\kelvin\\per\\kilogram}. => H
    set Reference specific heat       = 1   # ??

    # The value of the constant viscosity. Units: \\si{\\pascal\\second}.
    set Ra                     = 1e4
    set Di = 0.25 # BA: Di=0.0
    set b=0
    set c=0
    set gamma = 1.0
  end

end


# The settings above all pertain to the description of the
# continuous partial differential equations we want to solve.
# The following section deals with the discretization of
# this problem, namely the kind of mesh we want to compute
# on. We here use a globally refined mesh without
# adaptive mesh refinement.
subsection Mesh refinement
  set Initial global refinement                = 4
  set Initial adaptive refinement              = 0
  set Time steps between mesh refinement       = 0
  set Coarsening fraction                      = 0.0
  set Refinement fraction                      = 1.0
  #set Additional refinement times              = 0.1, 0.2, 0.3, 0.5, 1.0, 1.5, 2.0
  set Additional refinement times              = 0.35
end


# The final part is to specify what ASPECT should do with the
# solution once computed at the end of every time step. The
# process of evaluating the solution is called `postprocessing'
# and we choose to compute velocity and temperature statistics,
# statistics about the heat flux through the boundaries of the
# domain, and to generate graphical output files for later
# visualization. These output files are created every time
# a time step crosses time points separated by 0.01. Given
# our start time (zero) and final time (0.5) this means that
# we will obtain 50 output files.
subsection Postprocess
  set List of postprocessors = velocity statistics, temperature statistics, heat flux statistics, depth average, heating statistics

  subsection Visualization
    set Interpolate output = false
    set Time between graphical output = 1e-3
    set List of output variables      = material properties, adiabat, thermal conductivity, heating, artificial viscosity
  end
end

subsection Solver parameters
  set Temperature solver tolerance = 1e-10

  subsection Stokes solver parameters
    set Use direct solver for Stokes system = true#false
    set Linear solver tolerance = 1e-7
  end
end
